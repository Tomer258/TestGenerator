package id208133280_id207496068;

import java.io.Serializable;

public class AmericanQuestion extends Question implements Serializable  {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	protected String rightAnswer;
	protected Set<String> allAnswers;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public AmericanQuestion(String qText) {
		super(qText);
		allAnswers = new Set<>(String.class, 10);
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public AmericanQuestion(String qText,String rightAnswer) {
		super(qText);
		allAnswers = new Set<>(String.class, 10);
		this.rightAnswer=rightAnswer;
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public boolean addAnswers(String text) {
		if (allAnswers.size() == 10||allAnswers.contains(text)) {
			return false;
		} else {
			allAnswers.add(text);
			return true;
		}
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public void changeAnswer(String text, int num) {
		allAnswers.set(num, text);
	}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	public int getArraySize() {
		return allAnswers.size();
	}
	public String getRightAnswer() {
		return this.rightAnswer;
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public String getAnswer(int num) {
		return allAnswers.get(num);
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public void setRightAnswer(String rightAnswer) {
		this.rightAnswer=rightAnswer;
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public void deleteAnswer(int index) {
		allAnswers.remove(index);
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append(qText + "\n\n" + "Possible answers:" + "\n");
		for (int i = 0; (i < allAnswers.size()) && (allAnswers.get(i) != null); i++) {
			sb.append((i + 1) + "-" + allAnswers.get(i));
			if (allAnswers.get(i).equals(rightAnswer)) {
				sb.append("-->Correct Answer" + "\n");
			} else {
				sb.append("-->Wrong Answer" + "\n");
			}
		}
		return sb.toString();
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public AmericanQuestion(AmericanQuestion other) {
		this.qText = other.qText;
		this.rightAnswer = other.rightAnswer;
		this.id = other.id;
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public boolean checkIfExists(String answer) {
		return allAnswers.contains(answer);
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public void addNoAnswersAreCorrect() {
		allAnswers.add("No answers are correct");
		rightAnswer = "No answers are correct";
	}
	
	public Set<String> getAnswersSet() {
		return allAnswers;
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public boolean equals(AmericanQuestion other) {
		if (this.qText.equals(other.qText) == false) {
			return false;
		} else if (this.rightAnswer.equals(other.rightAnswer) == false) {
			return false;
		} else if (this.allAnswers.size() != other.allAnswers.size()) {
			return false;
		} else {
			boolean check = true;
			for (int i = 0; i < this.allAnswers.size(); i++) {
				if (this.allAnswers.contains(other.allAnswers.get(i))) {
					check &= true;
				} else {
					check &= false;
				}
			}
			return check;
		}
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
